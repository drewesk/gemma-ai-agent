import { getDocuments, addDocument } from '../services/store';

/**
 * Document model.
 *
 * This module encapsulates persistence logic for documents. It delegates
 * to the underlying store implementation (either a JSON file or MongoDB)
 * and provides a simple interface for controllers to interact with.
 */

export interface Document {
  id: string;
  content: string;
  createdAt: string;
}

/**
 * Fetch all documents from the store. Returns an array of document
 * objects. Each document contains an `id`, `content` and `createdAt`
 * timestamp. If the store is backed by MongoDB, this will retrieve
 * records from the configured collection; otherwise it reads from the
 * local JSON file.
 */
export async function findAll(): Promise<Document[]> {
  const docs = await getDocuments();
  return docs as Document[];
}

/**
 * Create a new document. Accepts a content string and an optional id.
 * If the id is omitted a timestamp-based id will be generated by the
 * store. Returns the persisted document.
 *
 * @param content The document text
 * @param id Optional document identifier
 */
export async function create(content: string, id?: string): Promise<Document> {
  const doc = await addDocument(content, id);
  return doc as Document;
}