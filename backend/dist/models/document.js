"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAll = findAll;
exports.create = create;
const store_1 = require("../services/store");
/**
 * Fetch all documents from the store. Returns an array of document
 * objects. Each document contains an `id`, `content` and `createdAt`
 * timestamp. If the store is backed by MongoDB, this will retrieve
 * records from the configured collection; otherwise it reads from the
 * local JSON file.
 */
function findAll() {
    return __awaiter(this, void 0, void 0, function* () {
        const docs = yield (0, store_1.getDocuments)();
        return docs;
    });
}
/**
 * Create a new document. Accepts a content string and an optional id.
 * If the id is omitted a timestamp-based id will be generated by the
 * store. Returns the persisted document.
 *
 * @param content The document text
 * @param id Optional document identifier
 */
function create(content, id) {
    return __awaiter(this, void 0, void 0, function* () {
        const doc = yield (0, store_1.addDocument)(content, id);
        return doc;
    });
}
